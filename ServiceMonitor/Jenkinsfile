@NonCPS
def jsonParse(def json) {
	new groovy.json.JsonSlurperClassic().parseText(json)
}

def host = "http://apigateway.swag-infra:5555"
def auth = "Basic QWRtaW5pc3RyYXRvcjptYW5hZ2U="

pipeline {
	
	agent {
		kubernetes {
    	label 'docker-builder'
    	defaultContainer 'jnlp'
    	yaml """
kind: Pod
spec:
  serviceAccountName: jenkins-agent-account
  containers:
  - name: jnlp
    workingDir: /tmp/jenkins
  - name: msr-base 
    workingDir: /tmp/jenkins
    image: ${REGISTRY}/microservice-runtime-tcdb:10.11
    command:
    - /bin/sleep
    - 6000
    tty: true
  - name: dind
    workingDir: /tmp/jenkins
    image: portainer/kube-tools
    imagePullPolicy: Always
    restartPolicy: Never
    command: 
    - /bin/cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
    - name: jenkins-docker-cfg
      mountPath: /root/.docker
    securityContext:
      privileged: true
  volumes:
  - name: docker-sock
    hostPath:
      path: "/var/run/docker.sock"
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: regcred 
          items:
            - key: .dockerconfigjson
              path: config.json 
"""
		}
	}

		
	parameters{
		string(name: 'REGISTRY', defaultValue: 'registry.master.servers', description: 'Endpoint of the docker registry')
		string(name: 'HOST', description: 'Base hostname of your cloud machine for the ingress')
	}

	environment {
		PACKAGE = "ServiceMonitor"
		NAMESPACE = "api-first-workshop"
		REGISTRY_INGRESS = "https://${params.REGISTRY}"
		CONTAINER = "service-monitor-api"
		CONTAINER_TAG = "1.0.${env.BUILD_NUMBER}"
    }

    stages {

		stage('Prepare'){
            steps {
				dir("${PACKAGE}") {
					sh 'mkdir build \
						build/repo \
						build/container \
						dist \
						build/test \
						build/test/reports'
					sh 'chmod -R go+w build/test'
					sh 'cd build/container; \
					    cp -r ${WORKSPACE}/${PACKAGE}/Dockerfile .; \
						cp -r ${WORKSPACE}/${PACKAGE}/src/IS/${PACKAGE} .;'
				}
			}
		}

		stage('Deploy API') {

			steps {
				script {
					def toJson = {
						input ->
							groovy.json.JsonOutput.toJson(input)
					}

					def apiName = "${PACKAGE}API"
					def apiFile = "${WORKSPACE}/${PACKAGE}/api/ServiceMonitor.swagger.yaml"

					//Check if API already exists
					response = httpRequest acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: auth]], httpMode: 'GET', url: "${host}/rest/apigateway/apis?apiName=${apiName}", validResponseCodes: '200'

					def object = jsonParse(response.content)

					def APIID = object.apiResponse.api.id

					echo "api id with apiResponse: ${APIID[0]}"

					if (APIID == null || APIID ==[]) {
						response = httpRequest acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: auth]], httpMode: 'POST', url: "${host}/rest/apigateway/apis", validResponseCodes: '201', formData: [[name: 'apiName', body: apiName], [name: 'type', body: 'swagger'], [name: 'apiVersion', body: '1.0'], [name: 'apiDescription', body: 'Service Monitor API'], [contentType: 'text/plain', name: 'file', fileName: "ServiceMonitor.swagger.yaml", uploadFile: "${WORKSPACE}/${PACKAGE}/api/ServiceMonitor.swagger.yaml"]]
					}
				}
			}
		}

        stage('Build'){
            steps {
				container(name: 'dind', shell: '/bin/sh') {
					sh '''#!/bin/sh
            			cd ${PACKAGE}
            		'''
					script {
						docker.withRegistry("${REGISTRY_INGRESS}") {
					
							def customImage = docker.build("${CONTAINER}:${CONTAINER_TAG}", "${PACKAGE}/build/container --build-arg BASE_IMAGE=microservice-runtime-tcdb:10.11 --build-arg PACKAGE=${PACKAGE}")

							/* Push the container to the custom Registry */
							customImage.push()
						}
					}
				}
			}
		}
		
		stage('Deploy-Container'){
            steps {
				container(name: 'dind', shell: '/bin/sh') {
					withKubeConfig([credentialsId: 'jenkins-agent-account', serverUrl: 'https://kubernetes.default']) {
						sh '''#!/bin/sh
						cat ${PACKAGE}/deployment/api-DC.yml | sed --expression='s/${CONTAINER}/'$CONTAINER'/g' | sed --expression='s/${REGISTRY}/'$REGISTRY'/g' | sed --expression='s/${CONTAINER_TAG}/'$CONTAINER_TAG'/g' | kubectl apply -f -'''
				
						script {
							try {
								sh 'kubectl -n ${NAMESPACE} get service ${CONTAINER}-service'
							} catch (exc) {
								echo 'Service does not exist yet'
								sh '''#!/bin/sh
								cat ${PACKAGE}/deployment/service-route.yml | sed --expression='s/${HOST}/'$HOST'/g' | sed --expression='s/${CONTAINER}/'$CONTAINER'/g' | sed --expression='s/${NAMESPACE}/'$NAMESPACE'/g' | kubectl apply -f -'''
							}
						}
					}
				}
            }
		}

		stage('Activate API') {
			steps {
				script {
					
					def apiName = "${PACKAGE}API"

					response = httpRequest acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: auth]], httpMode: 'GET', url: "${host}/rest/apigateway/apis?apiName=${apiName}", validResponseCodes: '200'

					def object = jsonParse(response.content)

					def APIID = object.apiResponse.api.id[0]
					echo "api id with apiResponse: ${APIID}"
					
					response = httpRequest acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: auth]], httpMode: 'PUT', url: "${host}/rest/apigateway/apis/${APIID}/activate", validResponseCodes: '200'
					
					echo "api id with ID: ${APIID} activated"
				}
			}
		}
    }
}
