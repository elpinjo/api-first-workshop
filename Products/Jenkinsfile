pipeline {

	agent {
		kubernetes {
    	label 'docker-builder'
    	defaultContainer 'jnlp'
    	yaml """
kind: Pod
spec:
  serviceAccountName: jenkins-agent-account
  containers:
  - name: jnlp
    workingDir: /tmp/jenkins
  - name: msr-base
    workingDir: /tmp/jenkins
    image: ${REGISTRY}/microservice-runtime-tcdb:10.11
    command:
    - /bin/sleep
    - 6000
    tty: true
  - name: dind
    workingDir: /tmp/jenkins
    image: portainer/kube-tools
    imagePullPolicy: Always
    restartPolicy: Never
    command: 
    - /bin/cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
    securityContext:
      privileged: true
  volumes:
  - name: docker-sock
    hostPath:
      path: "/var/run/docker.sock"
"""
		}
	}
	
	parameters{
		string(name: 'REGISTRY', defaultValue: 'registry.master.servers', description: 'Endpoint of the docker registry')
		string(name: 'HOST', description: 'Base hostname of your cloud machine for the ingress')
	}

	environment {
		PACKAGE = "Products"
		NAMESPACE = "api-first-workshop"
		REGISTRY_INGRESS = "https://${params.REGISTRY}"
		CONTAINER = "products-api"
		CONTAINER_TAG = "1.0"
    }

    stages {
        stage('Prepare'){
            steps {
				dir("${PACKAGE}") {
					sh 'mkdir build \
						build/repo \
						build/container \
						dist \
						build/test \
						build/test/reports'
					sh '''#!/bin/sh
					    cd test
					    sed -i 's#%env.WORKSPACE%#'$WORKSPACE'#g' run-test-suites.properties
            			sed -i 's/%env.PACKAGE%/'$PACKAGE'/g' run-test-suites.properties
						sed -i 's/%env.HOST%/'$HOST'/g' run-test-suites.properties
						cd ..'''
					sh 'mv config build/container'
					sh 'chmod -R go+w build/test; \
						chmod go+w test'
					sh 'cd build/container; \
					    cp -r ${WORKSPACE}/${PACKAGE}/Dockerfile .; \
						cp -r ${WORKSPACE}/${PACKAGE}/src/IS/${PACKAGE} .; \
						cp -r ${WORKSPACE}/${PACKAGE}/src/IS/ConnectedDemos .; \
						cp -r ${WORKSPACE}/${PACKAGE}/src/IS/ConnectedDemosTCDB .;'

				}
			}
		}

		stage('Build') {
			steps {
				container(name: 'dind', shell: '/bin/sh') {
					sh '''#!/bin/sh
            			cd ${PACKAGE}
            		'''
					script {
						docker.withRegistry("${REGISTRY_INGRESS}") {
					
							def customImage = docker.build("${CONTAINER}:${CONTAINER_TAG}.${BUILD_NUMBER}", "${PACKAGE}/build/container --build-arg BASE_IMAGE=microservice-runtime-tcdb:10.11 --build-arg PACKAGE=${PACKAGE}")

							/* Push the container to the custom Registry */
							customImage.push()
						}
					}
				}
			}
		}

		stage('Deploy-Container'){
            steps {
				container(name: 'dind', shell: '/bin/sh') {
					withKubeConfig([credentialsId: 'jenkins-agent-account', serverUrl: 'https://kubernetes.default']) {
						sh 'cat ${PACKAGE}/deployment/api-DC.yml | sed --expression=\'s/${REGISTRY}/\'"$REGISTRY"\'/g\' | sed --expression=\'s/${BUILD_NUMBER}/\'"$BUILD_NUMBER"\'/g\' | kubectl apply -f -'
				
						script {
							try {
								sh 'kubectl -n ${NAMESPACE} get service ${CONTAINER}-service'
							} catch (exc) {
								echo 'Service does not exist yet'
								sh '''cat ${PACKAGE}/deployment/service-route.yml | sed --expression='s/${CONTAINER}/'$CONTAINER'/g' | sed --expression='s/${HOST}/'$HOST'/g' | sed --expression='s/${NAMESPACE}/'$NAMESPACE'/g' | kubectl apply -f -'''
							}
						}
					}
				}
            }
        }

//		stage('Test') {
//			steps {
//				container(name: 'msr-base', shell: '/bin/sh') {
//					sh '''#!/bin/sh
//						echo "Starting test of Package $PACKAGE"
//						cd ${WORKSPACE}/${PACKAGE}/test
//						echo "working in `pwd`"
//						/opt/softwareag/common/lib/ant/bin/ant -f run-composite-runner.xml -propertyfile run-test-suites.properties composite-runner-all-tests
//						junit '**/build/test/reports/*.xml'''
//				}
//			}
//		}
    }
}
